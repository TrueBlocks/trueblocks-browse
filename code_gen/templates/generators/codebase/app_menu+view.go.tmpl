// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

{{range .Structures -}}
	{{/*==============================================================*/}}
	{{ $class := .Class }}
	{{ $routeName := .UiRouteName }}
	{{- $route := toLower .UiRouteName }}
	{{- if eq .Class "Project" }}
		{{- $route = "" }}
	{{- end }}

	{{ $isHistory := eq $class "History" }}
	{{ $isProject := eq $class "Project" }}
	{{ $isWizard := eq $class "Wizard" }}
	{{ $noParent := (eq .Parent "") }}
	{{ $hasChildren := (ne .Children "") }}

	{{ $wantsMulti := .Wants "multi" }}
	{{ if $hasChildren }}
		{{ $wantsMulti = true }}
	{{ end }}

	{{ $param1 := print "\"/" $route "\"" }}
	{{ $param2 := ", \"\"" }}
	{{ if $isHistory }}
		{{ $param2 = ", address.Hex()" }}
	{{ end }}

	{{/*==============================================================*/}}
	{{- if $noParent }}
		func (a *App) {{$routeName}}View(cb *menu.CallbackData) {
			{{- if $isHistory }}
				address := a.GetLastAddress()
			{{- else if $isWizard }}
				if a.isConfigured() {
					a.wizard.State = types.WizWelcome
					a.emitMsg(messages.Refresh, &messages.MessageMsg{
						State: string(a.wizard.State),
						Num1:  2, // 2 is the wizard step if needed
					})
				} else {
					a.StepWizard(types.WizNext)
				}
			{{- end }}

			{{- if $wantsMulti }}
				if strings.Contains(a.GetLastRoute(), "/{{ $route }}") {
					a.ToggleNextTab(cb)
				} else {
					a.Navigate({{$param1}}{{$param2}})
				}
			{{- else }}
				a.Navigate({{$param1}}{{$param2}})
			{{- end }}
		}
	{{- end }}
{{- end }}
