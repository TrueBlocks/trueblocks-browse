// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
import { useState, useEffect, useContext, useCallback, createContext, ReactNode, useRef } from "react";
import {
{{range .Structures}}{{if (eq .Children "")}}  Fetch{{.Class}},
{{end}}{{end}}  FetchAppInfo,
  LoadAddress,
} from "@gocode/app/App";
import { app, base, messages, types } from "@gocode/models";
import { EventsOff, EventsOn } from "@runtime";

interface AppStateProps {
{{- range .Structures}}{{if (eq .Children "")}} {{toLower .UiRouteName}}: types.{{.Class}}Container;
  fetch{{.UiRouteName}}: (currentItem: number, itemsPerPage: number) => void;
{{end}}{{end -}}
  info: app.AppInfo;
  loadAddress: (address: base.Address) => void;
  counters: React.MutableRefObject<Record<string, number>>;
}

const AppState = createContext<AppStateProps | undefined>(undefined);

export const AppStateProvider: React.FC<{ children: ReactNode }> = ({ children }: { children: ReactNode }) => {
{{range .Structures}}{{if (eq .Children "")}}  const [{{toLower .UiRouteName}}, set{{.UiRouteName}}] = useState<types.{{.Class}}Container>({} as types.{{.Class}}Container);
{{end}}{{end -}}
  const [info, setInfo] = useState<app.AppInfo>({} as app.AppInfo);
  const counters = useRef<Record<string, number>>({});

{{range .Structures}}{{if (eq .Children "")}}    const fetch{{.UiRouteName}} = useCallback((currentItem: number, itemsPerPage: number) => {
    // Note that this only fetches a single page after sorting and filtering (if any)
    Fetch{{.Class}}(currentItem, itemsPerPage).then((item: types.{{.Class}}Container) => {
      if (item) {
        set{{.UiRouteName}}(item);
      }
    });
  }, []);

{{end}}{{end}}
  const fetchAppInfo = () => {
    FetchAppInfo().then((info) => {
      setInfo(info);
    });
  };

  const loadAddress = (address: base.Address) => {
    const addressStr = address as unknown as string;
    LoadAddress(addressStr).then(() => {
      info.address = address;
      setInfo(info);
    });
  };

  useEffect(() => {
    const handleRefresh = () => {
      fetchAppInfo();
      fetchWizard(0, 100);
      fetchStatus(0, 100);
    };
    handleRefresh(); // first load

    // when messaged
    const { Message } = messages;
    EventsOn(Message.REFRESH, handleRefresh);
    return () => {
      EventsOff(Message.REFRESH);
    };
  }, [fetchStatus, fetchWizard]);

  return (
    <AppState.Provider
      value={ {
 {{range .Structures}}{{if (eq .Children "")}}    {{toLower .UiRouteName}},
    fetch{{.UiRouteName}},
{{end}}{{end -}}
        info,
        loadAddress,
        counters,
      } }
    >
      {children}
    </AppState.Provider>
  );
};

export const useAppState = () => {
  const context = useContext(AppState);
  if (!context) {
    throw new Error("useAppState must be used within a AppStateProvider");
  }
  return context;
};
