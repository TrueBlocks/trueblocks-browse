{{- if .NeedsFetch -}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{toLower .Class}}Lock atomic.Uint32

func (a *App) load{{.UiRouteLabel}}(wg *sync.WaitGroup, errorChan chan error) error {
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{toLower .Class}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{toLower .Class}}Lock.CompareAndSwap(1, 0)

	if !a.{{.UiRouteLower}}.NeedsUpdate(a.force{{.Class}}()) {
		return nil
	}

	opts := sdk.{{.UiRouteLabel}}Options{
		Globals: a.getGlobals(),
	}
	// EXISTING_CODE
	// EXISTING_CODE
	opts.Verbose = true

	if {{.UiRouteLower}}, meta, err := opts.{{.UiRouteLabel}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{.UiRouteLower}} == nil) || (len({{.UiRouteLower}}) == 0) {
		err = fmt.Errorf("no {{.UiRouteLower}} found")
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else {
		// EXISTING_CODE
		// EXISTING_CODE
		a.meta = *meta
		a.{{.UiRouteLower}} = types.New{{.Class}}Container(opts.Chain, {{if .HasItems}}{{.UiRouteLower}}{{end}}{{if .HasEmbed}}&{{.UiRouteLower}}[0]{{end}})
		// EXISTING_CODE
		// EXISTING_CODE
{{if .HasSorts -}}
		if err := sdk.Sort{{.UiRouteLabel}}(a.{{.UiRouteLower}}.Items, a.{{.UiRouteLower}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.{{.UiRouteLower}}.Summarize()
		a.emitInfoMsg("Loaded {{.UiRouteLower}}", "")
	}

	return nil
}

{{if .IsEditable}}func (a *App) Modify{{.Class}}(modData *ModifyData) error {
	opts := sdk.{{.UiRouteLabel}}Options{
		Addrs:   []string{modData.Address.Hex()},
		Globals: a.getGlobals(),
	}
	opts.Globals.Decache = true

	if _, _, err := opts.{{.UiRouteLabel}}(); err != nil {
		a.emitAddressErrorMsg(err, modData.Address)
		return err
	} else {
		new{{.UiRouteLabel}} := make([]{{.ItemType}}, 0, len(a.{{.UiRouteLower}}.Items))
		for _, {{toLower .Class}} := range a.{{.UiRouteLower}}.Items {
			if {{toLower .Class}}.Address == modData.Address {
				a.{{.UiRouteLower}}.NItems--
				a.{{.UiRouteLower}}.NEvents -= {{toLower .Class}}.NEvents
				a.{{.UiRouteLower}}.NFunctions -= {{toLower .Class}}.NFunctions
				continue
			}
			new{{.UiRouteLabel}} = append(new{{.UiRouteLabel}}, {{toLower .Class}})
		}
		a.{{.UiRouteLower}}.LastUpdate = time.Time{}
		a.{{.UiRouteLower}}.Items = new{{.UiRouteLabel}}
		a.emitInfoMsg("Modify{{.Class}} delete", modData.Address.Hex())
		return nil
	}
}
{{end}}

func (a *App) force{{.Class}}() (force bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
{{end -}}
