{{/*==============================================================*/}}

{{ $class := .Class }}
{{ $container := print $class "Container" }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $members := .Members }}
{{ $needsSdk := .Needs "sdk" }}

{{ $hasSorts := .HasSorts }}

{{ $hasItems := and (gt (len $itemName) 0) true }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isStatus := eq $class "Status" }}
{{ $isAbi := eq $class "Abi" }}
{{ $isName := eq $class "Name" }}
{{ $isProject := eq $class "Project" }}
{{ $isMonitor := eq $class "Monitor" }}

{{ $param1 := "wg *sync.WaitGroup, errorChan chan error" }}
{{ $param2 := "" }}
{{ if $isHistory }}
	{{ $param2 = ", address base.Address" }}
{{ end }}

{{ $loadFn := print "load" $routeName }}
{{ $lockName := print (toLower $class) "Lock" }}
{{ $dataName := $routeLower }}

{{/*==============================================================*/}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{$lockName}} atomic.Uint32

func (a *App) {{$loadFn}}({{$param1}}{{$param2}}) error {
	defer a.trackPerformance("{{$loadFn}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{$lockName}}.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{$lockName}}.CompareAndSwap(1, 0)

{{if not $isHistory}}	if !a.{{$dataName}}.NeedsUpdate() {
		return nil
	}

{{end}}{{if $needsSdk}}
	opts := sdk.{{$routeName}}Options{
		Globals: a.getGlobals(true /* verbose */),
	}
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
{{if $needsSdk}}	if {{$dataName}}, meta, err := opts.{{$routeName}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{$dataName}} == nil) || (len({{$dataName}}) == 0) {
		err = fmt.Errorf("no {{$dataName}} found")
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else {
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $needsSdk}}		a.meta = *meta
		a.{{$dataName}} = types.New{{$container}}(opts.Chain
{{- if $hasItems -}}
, {{$dataName}}{{if $isStatus}}[0].Caches{{end}}
{{- end -}}
{{- if $hasEmbed -}}
, &{{$dataName}}[0]
{{- end -}}
)
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $hasSorts -}}
		if err := sdk.Sort{{$routeName}}(a.{{$dataName}}.Items, a.{{$dataName}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.emitLoadingMsg(messages.Loaded, "{{$dataName}}")
{{if $needsSdk}}	}
{{end}}
	return nil
}

// EXISTING_CODE
// EXISTING_CODE
