{{/*==============================================================*/}}

{{ $class := .Class }}
{{ $container := print $class "Container" }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $members := .Members }}
{{ $needsSdk := .Needs "sdk" }}

{{ $hasSorts := .HasSorts }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isStatus := eq $class "Status" }}
{{ $isManifest := eq $class "Manifest" }}
{{ $isHistory := eq $class "History" }}
{{ $isSession := eq $class "Session" }}

{{ $dataName := $routeLower }}
{{ $appData := print "a." $routeLower }}
{{ if $isHistory }}
	{{ $dataName = $routeLower }}
	{{ $appData = $routeLower }}
{{ end }}

{{ $newOpt := $dataName }}
{{ $optionsName := print "sdk." $routeName "Options" }}
{{ if $isSession }}
	{{ $newOpt = "[]types.Nothing{}" }}
	{{ $optionsName = print $routeName "Options" }}
{{ end }}

{{/*==============================================================*/}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{$routeLower}}Lock atomic.Uint32

func (a *App) load{{$routeName}}(wg *sync.WaitGroup, errorChan chan error) error {
	defer a.trackPerformance("load{{$routeName}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{$routeLower}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{$routeLower}}Lock.CompareAndSwap(1, 0)

	// EXISTING_CODE
	// EXISTING_CODE

	if !{{$appData}}.NeedsUpdate() {
		return nil
	}
	updater := {{$appData}}.Updater
	defer func() {
{{ if $isHistory -}}
	history, _ = a.historyCache.Load(address)
	{{$appData}}.Updater = updater
	a.historyCache.Store(address, history)
{{else -}}
	{{$appData}}.Updater = updater
{{end -}}
	}()
	logger.InfoBY("Updating needed for {{$routeLower}}...")

{{if $needsSdk}}
	opts := {{$optionsName}}{
		Globals: a.getGlobals(true /* verbose */),
	}
{{end -}}
	// EXISTING_CODE
	// EXISTING_CODE
{{if $needsSdk -}}
	if {{$dataName}}, meta, err := opts.{{$routeName}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{$dataName}} == nil) || (len({{$dataName}}) == 0) {
		err = fmt.Errorf("no {{$dataName}} found")
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else {
{{end -}}
		// EXISTING_CODE
		// EXISTING_CODE
{{if $needsSdk -}}
		a.meta = *meta
		{{$appData}} = types.New{{$container}}(opts.Chain, {{$newOpt}}{{if $isStatus}}[0].Caches{{end}}{{if $isManifest}}[0].Chunks{{end}}
	{{- if $hasEmbed -}}
		, &{{$dataName}}[0]
	{{- end -}}
)
{{end -}}
		// EXISTING_CODE
		// EXISTING_CODE
{{if $hasSorts -}}
		if err := sdk.Sort{{$routeName}}({{$appData}}.Items, {{$appData}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.emitLoadingMsg(messages.Loaded, "{{$dataName}}")
{{if $needsSdk -}}
	}
{{end}}
	return nil
}

// EXISTING_CODE
// EXISTING_CODE
