{{/*==============================================================*/}}
{{ $class := .Class }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $members := .Members }}
{{ $needsSdk := .Needs "sdk" }}

{{ $hasSorts := .HasSorts }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isSession := eq $class "Session" }}
{{ $isWizard := eq $class "Wizard" }}
{{ $isDaemon := eq $class "Daemon" }}

{{ $expectsZero := (or (or $isWizard $isDaemon) false)}}
{{ $noSdk := (or (or $isWizard $isDaemon) $isSession) }}

{{ $appData := print "a." $routeLower }}
{{ if $isHistory }}
	{{ $appData = $routeLower }}
{{ end }}

{{ $optionsName := print "sdk." $routeName "Options" }}
{{ if $noSdk }}
	{{ $optionsName = print $routeName "Options" }}
{{ end }}

{{ $noRecords := print ` err = fmt.Errorf("no ` $routeLower ` found")
	if errorChan != nil {
		errorChan <- err
	}
	return err` }}
{{ if $expectsZero }}
	{{ $noRecords = `  // expected outcome
	a.meta = *meta
	return nil` }}
{{ end }}

{{/*==============================================================*/}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{$routeLower}}Lock atomic.Uint32

func (a *App) load{{$routeName}}(wg *sync.WaitGroup, errorChan chan error) error {
	defer a.trackPerformance("load{{$routeName}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{$routeLower}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{$routeLower}}Lock.CompareAndSwap(1, 0)

	// EXISTING_CODE
	// EXISTING_CODE

	if !{{$appData}}.NeedsUpdate() {
		return nil
	}
	updater := {{$appData}}.Updater
	defer func() {
{{ if $isHistory -}}
	// HIST-HIST
	history, _ = a.historyCache.Load(address)
	{{$appData}}.Updater = updater
	// HIST-HIST
	a.historyCache.Store(address, history)
{{else -}}
	{{$appData}}.Updater = updater
{{end -}}
	}()
	logger.InfoBY("Updating needed for {{$routeLower}}...")

{{if $needsSdk}}
	opts := {{$optionsName}}{
		Globals: a.getGlobals(true /* verbose */),
	}
{{end -}}
	// EXISTING_CODE
	// EXISTING_CODE
{{if $needsSdk -}}
	if {{$routeLower}}, meta, err := opts.{{$routeName}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{$routeLower}} == nil) || (len({{$routeLower}}) == 0) {
		{{$noRecords}}
	} else {
{{end -}}
		// EXISTING_CODE
		// EXISTING_CODE
{{if $needsSdk -}}
		a.meta = *meta
		{{$appData}} = types.New{{$class}}Container(opts.Chain, {{$routeLower}})
{{end -}}
		// EXISTING_CODE
		// EXISTING_CODE
{{if $hasSorts -}}
		if err := sdk.Sort{{$routeName}}({{$appData}}.Items, {{$appData}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.emitLoadingMsg(messages.Loaded, "{{$routeLower}}")
{{if $needsSdk -}}
	}
{{end}}
	return nil
}

// EXISTING_CODE
// EXISTING_CODE
