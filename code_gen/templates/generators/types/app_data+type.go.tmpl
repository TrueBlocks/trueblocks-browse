{{ $class := .Class }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $members := .Members }}
{{ $needsSdk := .Needs "sdk" }}

{{ $hasSorts := .HasSorts }}
{{ $sortsInstance := .SortsInstance }}

{{ $hasItems := and (gt (len $itemName) 0) true }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isStatus := eq $class "Status" }}

// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{toLower .Class}}Lock atomic.Uint32

func (a *App) load{{$routeName}}({{if $isHistory}}address base.Address, {{end}}wg *sync.WaitGroup, errorChan chan error) error {
	defer a.trackPerformance("load{{$routeName}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{toLower .Class}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{toLower .Class}}Lock.CompareAndSwap(1, 0)
{{- if not $isHistory}}

	if !a.{{$routeLower}}.NeedsUpdate(a.force{{$class}}()) {
		return nil
	}
{{end}}
{{if $needsSdk}}
	opts := sdk.{{$routeName}}Options{
		Globals: a.getGlobals(true),
	}
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
{{if $needsSdk}}	if {{$routeLower}}, meta, err := opts.{{$routeName}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{$routeLower}} == nil) || (len({{$routeLower}}) == 0) {
		err = fmt.Errorf("no {{$routeLower}} found")
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else {
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $needsSdk}}		a.meta = *meta
		a.{{$routeLower}} = types.New{{$class}}Container(opts.Chain
{{- if $hasItems -}}
, {{$routeLower}}{{if $isStatus}}[0].Caches{{end}}
{{- end -}}
{{- if $hasEmbed -}}
, &{{$routeLower}}[0]
{{- end -}}
)
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $hasSorts -}}
		if err := sdk.Sort{{$routeName}}(a.{{$routeLower}}.Items, a.{{$routeLower}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.emitInfoMsg("Loaded {{$routeLower}}", "")
{{if $needsSdk}}	}
{{end}}
	return nil
}

func (a *App) force{{$class}}() (force bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
