{{/*==============================================================*/}}
{{ $class := .Class }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemType := .ItemType }}
{{ $embedType := .EmbedType }}
{{ $members := .Members }}

{{ $hasSorts := .HasSorts }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isSession := eq $class "Session" }}
{{ $isWizard := eq $class "Wizard" }}
{{ $isDaemon := eq $class "Daemon" }}
{{ $isProject := eq $class "Project" }}
{{ $isSettings := eq $class "Settings" }}

{{ $one := (or $isHistory $isSettings) }}
{{ $two := (or $isWizard $isDaemon) }}
{{ $three := (or $isSession $isProject) }}
{{ $expectsZero := (or $one (or $two $three) )}}

{{ $appData := print "a." $routeLower }}
{{ if $isHistory }}
	{{ $appData = $routeLower }}
{{ end }}

{{ $sorts := "" }}
{{ if $hasSorts }}
	{{ $sorts = print `	if err := sdk.Sort` $routeName `(` $appData `.Items, ` $appData `.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
`}}
{{ end }}

{{ $param1 := ""}}
{{ if $isHistory }}
	{{ $param1 = "address" }}
{{ end }}

{{ $param2 := "" }}
{{ if $isHistory }}
	{{ $param2 = ", errorChan" }}
{{ end }}

{{ $param3 := ""}}
{{ if $isHistory }}
	{{ $param3 = ", address" }}
{{ end }}

{{ $param4 := "" }}
{{ if $isHistory }}
	{{ $param4 = "address base.Address, errorChan chan error" }}
{{ end }}

{{ $returnType := print "items []types." $itemType }}
{{ if $hasEmbed }}
	{{ $returnType = print "items []types." $embedType }}
{{ end }}

{{ $noRecords := print ` err = fmt.Errorf("no ` $routeLower ` found")
	if errorChan != nil {
		errorChan <- err
	}
	return err` }}
{{ if $expectsZero }}
	{{ $noRecords = `  // this outcome is okay
	a.meta = *meta
	return nil` }}
{{ end }}

{{/*==============================================================*/}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{$routeLower}}Lock atomic.Uint32

func (a *App) load{{$routeName}}(wg *sync.WaitGroup, errorChan chan error) error {
	defer a.trackPerformance("load{{$routeName}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{$routeLower}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{$routeLower}}Lock.CompareAndSwap(1, 0)

	// EXISTING_CODE
	// EXISTING_CODE

	if !{{$appData}}.NeedsUpdate() {
		return nil
	}
	updater := {{$appData}}.Updater
	defer func() {
{{ if $isHistory -}}
	// HIST-HIST
	history, _ = a.historyCache.Load(address)
	{{$appData}}.Updater = updater
	// HIST-HIST
	a.historyCache.Store(address, history)
{{else -}}
	{{$appData}}.Updater = updater
{{end -}}
	}()
	logger.InfoBY("Updating {{$routeLower}}...")

	// EXISTING_CODE
	// EXISTING_CODE
	if items, meta, err := a.pull{{toPlural $class}}({{$param1}}{{$param2}}); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if (items == nil) || (len(items) == 0) {
		{{$noRecords}}
	} else {
		// EXISTING_CODE
		// EXISTING_CODE
		a.meta = *meta
		{{$appData}} = types.New{{$class}}Container(a.getChain(), items{{$param3}})
		// EXISTING_CODE
		// EXISTING_CODE
		{{ $sorts }} a.emitLoadingMsg(messages.Loaded, "{{$routeLower}}")
	}

	return nil
}

func (a *App) pull{{toPlural $class}}({{$param4}}) ({{$returnType}}, meta *types.Meta, err error) {
	// EXISTING_CODE
	// EXISTING_CODE
}

// EXISTING_CODE
// EXISTING_CODE
