{{ $class := .Class }}
{{ $lower := toLower .Class }}
{{ $routeLabel := .UiRouteLabel}}
{{ $routeLower := .UiRouteLower -}}
{{ $embedType := .EmbedType }}
{{ $embedName := .EmbedName }}
{{ $hasSorts := .HasSorts }}
{{ $initChain := .InitChain }}
{{ $inputType := .InputType }}
{{ $isEditable := .IsEditable}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $members := .Members }}
{{ $needsChain := .NeedsChain }}
{{ $needsSdk := .NeedsSdk}}
{{ $needsLoad := .NeedsLoad}}
{{ $otherName := .OtherName }}
{{ $otherType := .OtherType }}
{{ $sortsInstance := .SortsInstance }}

{{ $hasItems := and (gt (len .ItemName) 0) true }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isStatus := eq $class "Status" }}

// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package app

// EXISTING_CODE
// EXISTING_CODE

var {{$lower}}Lock atomic.Uint32

//-------------------------------------------------------------------
func (a *App) load{{$routeLabel}}({{if $isHistory}}address base.Address, {{end}}wg *sync.WaitGroup, errorChan chan error) error {
	defer a.trackPerformance("load{{$routeLabel}}", false)()
	defer func() {
		if wg != nil {
			wg.Done()
		}
	}()

	if !{{$lower}}Lock.CompareAndSwap(0, 1) {
		return nil
	}
	defer {{$lower}}Lock.CompareAndSwap(1, 0)
{{- if not $isHistory}}

	if !a.{{$routeLower}}.NeedsUpdate(a.force{{$class}}()) {
		return nil
	}
{{end}}
{{if $needsSdk}}
	opts := sdk.{{$routeLabel}}Options{
		Globals: a.getGlobals(),
	}
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
{{if $needsSdk}}	opts.Verbose = true

	if {{$routeLower}}, meta, err := opts.{{$routeLabel}}List(); err != nil {
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else if ({{$routeLower}} == nil) || (len({{$routeLower}}) == 0) {
		err = fmt.Errorf("no {{$routeLower}} found")
		if errorChan != nil {
			errorChan <- err
		}
		return err
	} else {
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $needsSdk}}		a.meta = *meta
		a.{{$routeLower}} = types.New{{$class}}Container(opts.Chain
{{- if $hasItems -}}
, {{$routeLower}}{{if $isStatus}}[0].Caches{{end}}
{{- end -}}
{{- if $hasEmbed -}}
, &{{$routeLower}}[0]
{{- end -}}
)
{{end}}		// EXISTING_CODE
		// EXISTING_CODE
{{if $hasSorts -}}
		if err := sdk.Sort{{$routeLabel}}(a.{{$routeLower}}.Items, a.{{$routeLower}}.Sorts); err != nil {
			a.emitErrorMsg(err, nil)
		}
{{end -}}
		a.emitInfoMsg("Loaded {{$routeLower}}", "")
{{if $needsSdk}}	}
{{end}}
	return nil
}

{{if $isEditable}}//-------------------------------------------------------------------
func (a *App) Modify{{$class}}(modData *ModifyData) error {
	opts := sdk.{{$routeLabel}}Options{
		Addrs:   []string{modData.Address.Hex()},
		Globals: a.getGlobals(),
	}
	opts.Globals.Decache = true

	if _, _, err := opts.{{$routeLabel}}(); err != nil {
		a.emitAddressErrorMsg(err, modData.Address)
		return err
	} else {
		new{{$routeLabel}} := make([]{{$itemType}}, 0, len(a.{{$routeLower}}.Items))
		for _, {{$lower}} := range a.{{$routeLower}}.Items {
			if {{$lower}}.Address == modData.Address {
				a.{{$routeLower}}.NItems--
				a.{{$routeLower}}.NEvents -= {{$lower}}.NEvents
				a.{{$routeLower}}.NFunctions -= {{$lower}}.NFunctions
				continue
			}
			new{{$routeLabel}} = append(new{{$routeLabel}}, {{$lower}})
		}
		a.{{$routeLower}}.LastUpdate = 0
		a.{{$routeLower}}.Items = new{{$routeLabel}}
		a.emitInfoMsg("Modify{{$class}} delete", modData.Address.Hex())
		return nil
	}
}
{{end}}

//-------------------------------------------------------------------
func (a *App) force{{$class}}() (force bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE

//-------------------------------------------------------------------
// Template variables:
// class:         {{$class}}
// lower:         {{$lower}}
// routeLabel:    {{$routeLabel}}
// routeLower:    {{$routeLower}}
// embedName:     {{$embedName}}
// embedType:     {{$embedType}}
// otherName:     {{$otherName}}
// otherType:     {{$otherType}}
// itemName:      {{$itemName}}
// itemType:      {{$itemType}}
// inputType:     {{$inputType}}
// hasItems:      {{if $hasItems}}true{{else}}false{{end}}
// hasEmbed:      {{if $hasEmbed}}true{{else}}false{{end}}
// hasSorts:      {{$hasSorts}}
// initChain:     {{$initChain}}
// isEditable:    {{$isEditable}}
// needsChain:    {{$needsChain}}
// needsLoad:     {{$needsLoad}}
// needsSdk:      {{$needsSdk}}
