{{/*==============================================================*/}}

{{ $class := .Class }}
{{ $routeName := .UiRouteName }}
{{ $routeLower := toLower .UiRouteName }}
{{ $itemName := .ItemName }}
{{ $hasSearch := .HasSearch }}

{{ $isAbi := eq $class "Abi" }}
{{ $isName := eq $class "Name" }}
{{ $isMonitor := eq $class "Monitor" }}
{{ $isProject := eq $class "Project" }}
{{ $isSettings := eq $class "Settings" }}
{{ $isHistory := eq $class "History" }}
{{ $isWizard := eq $class "Wizard" }}
{{ $isDaemon := eq $class "Daemon" }}

{{ $hasEnter := or (or $isAbi $isName) (or $isProject $isMonitor) }}
{{ $hasModify := or (or $isAbi $isName) (or $isProject $isMonitor) }}

{{ $noops := print "const { enterNoop, modifyNoop } = useNoops();" }}
{{ if or (or $hasEnter $hasModify) $isWizard }}
  {{ if and $hasEnter $hasModify}}
    {{ $noops = "" }}
  {{ else if or $hasEnter $isWizard }}
    {{ $noops = print "const { modifyNoop } = useNoops();" }}
  {{ else }}
    {{ $noops = print "const { enterNoop } = useNoops();" }}
  {{ end }}
{{ end }}

{{ $param1 := "" }}
{{ if $hasEnter}}
  {{ $param1 = ", loadAddress" }}
{{end}}

{{ $param2 := "" }}
{{ if $isHistory }}
  {{ $param2 = ", info.address" }}
{{ else if $isWizard }}
  {{ $param2 = ", wizard.nItems, stepWizard" }}
{{ end }}

{{ $dataName := $routeLower }}
{{ $route := $routeLower }}
{{ if $isProject }}
  {{ $route = "" }}
{{ end }}

{{ $handleEnter := `const handleEnter = enterNoop;` }}
{{ if $isWizard }}
  {{ $handleEnter = `const handleEnter = () => {
  stepWizard(types.WizStep.NEXT);
  };` }} 
{{ else if $hasEnter }}
  {{ $handleEnter = print `const handleEnter = (page: Page) => {
  loadAddress(` $dataName `.items[page.getRecord()].address);
  };` }}
{{ end }}

{{ $handleModify := "const handleModify = modifyNoop;" }}
{{ if $hasModify }}
  {{ $handleModify = print "const handleModify = Modify" $class ";" }}
{{ end }}

{{ $view := print $routeName "View" }}
{{ $fetchFn := print "fetch" $routeName }}

{{/*==============================================================*/}}

// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).

// EXISTING_CODE
// EXISTING_CODE

export const {{$view}} = () => {
  const { {{$dataName}}, {{$fetchFn}}{{$param1}}} = useAppState();
  {{$noops -}}
  {{$handleEnter -}}
  {{$handleModify}}

  // EXISTING_CODE
  // EXISTING_CODE

{{if (not $isSettings)}}  const table = useReactTable({
    data: {{$dataName}}?.items || [],
    columns: {{$routeName}}TableDef,
    getCoreRowModel: getCoreRowModel(),
  });{{end}}

{{if not $isSettings}}  const route = "{{$route}}";
  const tabs = ["{{$dataName}}"];
  const forms: ViewForm = {
    {{$dataName}}: <FormTable data={ {{$dataName}} } groups={ {{$routeName}}FormDef(table{{$param2}})} />,
  };
{{end}}

  return (
    <ViewStateProvider
      // do not remove - delint
      route={route}
      nItems={ {{$routeLower}}.nItems}
      fetchFn={ {{$fetchFn}}}
      onEnter={handleEnter}
      modifyFn={handleModify}
    >
      <DebugState u={ {{$dataName}}.updater} />
      <View tabs={tabs} forms={forms}{{if $hasSearch}} searchable{{end}} />
    </ViewStateProvider>
  );
};

// EXISTING_CODE
// EXISTING_CODE
