{{ $class := .Class }}
{{ $routeName := .UiRouteName }}
{{ $routeLower := toLower .UiRouteName }}

{{ $itemName := .ItemName }}
{{ $embedName := .EmbedName }}
{{ $hasItems := and (gt (len $itemName) 0) true }}
{{ $hasEmbed := and (gt (len $embedName) 0) true }}

{{ $isAbi := eq $class "Abi" }}
{{ $isName := eq $class "Name" }}
{{ $isMonitor := eq $class "Monitor" }}
{{ $isProject := eq $class "Project" }}
{{ $isSettings := eq $class "Settings" }}
{{ $isHistory := eq $class "History" }}
{{ $isWizard := eq $class "Wizard" }}
{{ $isDaemon := eq $class "Daemon" }}

{{ $isSearchable := or (or $isAbi $isName) (or $isProject $isMonitor) }}
{{ $hasEnter := or (or $isAbi $isName) (or $isProject $isMonitor) }}
{{ $hasModify := or (or $isAbi $isName) (or $isProject $isMonitor) }}

{{ $noops := print "const { enterNoop, modifyNoop } = useNoops();" }}
{{ if or (or $hasEnter $hasModify) (or $isWizard $isDaemon) }}
  {{ if and $hasEnter $hasModify}}
    {{ $noops = "" }}
  {{ else if or $hasEnter $isWizard }}
    {{ $noops = print "const { modifyNoop } = useNoops();" }}
  {{ else if $isDaemon }}
    {{ $noops = print "const { fetchNoop, enterNoop, modifyNoop } = useNoops();" }}
  {{ else }}
    {{ $noops = print "const { enterNoop } = useNoops();" }}
  {{ end }}
{{ end }}

{{ $nItems := print $routeLower ".nItems" }}
{{ if not $hasItems }}
  {{ $nItems = "0" }}
{{ else if $isSettings }}
  {{ $nItems = "status.nItems" }}
{{ end }}

// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).

// EXISTING_CODE
// EXISTING_CODE

export const {{$routeName}}View = () => {
{{if not $isDaemon}}  const { {{$routeLower}}, fetch{{$routeName}}{{if $hasEnter}}, loadAddress{{end}}} = useAppState();{{end}}
  {{ $noops }}
{{- if and $hasEnter $hasModify }} const handleEnter = (page: Page) => {
    loadAddress({{$routeLower}}.items[page.getRecord()].address);
  };
  const handleModify = Modify{{$class}};
{{- else }}
  {{ if $hasEnter }}  const handleEnter = (page: Page) => {
      loadAddress({{$routeLower}}.items[page.getRecord()].address);
    };
  {{- else if $isWizard }}  const handleEnter = () => {
      stepWizard(types.WizStep.NEXT);
    };
  {{- else }}  const handleEnter = enterNoop;{{ end }}
  {{ if $hasModify }}  const handleModify = Modify{{$class}};
  {{ else }}  const handleModify = modifyNoop;{{ end }}
{{ end }}

  // EXISTING_CODE
  // EXISTING_CODE

{{if not $isSettings}}{{if $hasItems}}  const table = useReactTable({
    data: {{$routeLower}}?.items || [],
    columns: {{$routeName}}TableDef,
    getCoreRowModel: getCoreRowModel(),
  });{{end}}

  const route = "{{if $isProject}}{{else}}{{$routeLower}}{{end}}";
  const tabs = ["{{$routeLower}}"];
  const forms: ViewForm = {
    {{$routeLower}}: <FormTable
      data={ {{$routeLower}} }
      groups={ {{$routeName}}FormDef(table{{if $isHistory}}, info.address{{else if $isWizard}}, wizard.nItems, stepWizard{{end}})} />,
  };
{{if and $hasItems (not $isSettings)}}
  // if (!({{$routeLower}}?.items?.length > 0)) {
  //   return <>Loading...</>;
  // }{{end}}{{end}}

  return (
    <ViewStateProvider
      // do not remove - delint
      route={route}
      nItems={ {{$nItems}}}
      fetchFn={fetch{{$routeName}}}
      onEnter={handleEnter}
      modifyFn={handleModify}
    >
      <DebugState n={ {{if not $isDaemon}}{{$routeLower}}.lastUpdate}{{else}}0}{{end}} />
      <View tabs={tabs} forms={forms}{{if $isSearchable}} searchable{{end}} />
    </ViewStateProvider>
  );
};

// EXISTING_CODE
// EXISTING_CODE
