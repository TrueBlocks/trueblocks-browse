// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

type {{.Class}}Container struct {
{{range .Members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}{{if .NeedsEmbed}}{{.EmbedType}} `json:",inline"`
{{end}}{{if .NeedsItems}}	Items []{{.ItemType}} `json:"items"`
	NItems uint64 `json:"nItems"`
{{end}}{{if .HasSorts}}	Sorts sdk.SortSpec `json:"sorts"`
{{end}}{{if .NeedsChain}}	Chain string `json:"chain"`
{{end}}	LastUpdate time.Time `json:"lastUpdate"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{.Class}}Container(chain string{{if .NeedsItems}}, itemsIn []{{.InputType}}{{end}}{{if .NeedsEmbed}}, {{toLower .EmbedName}} *{{.EmbedType}}{{end}}{{if .NeedsOther}}, {{toLower .OtherName}} {{.OtherType}}{{end}}) {{.Class}}Container {
	ret := {{.Class}}Container{
	{{if .NeedsItems}}Items: {{if eq .ItemType .InputType}}itemsIn,
NItems: uint64(len(itemsIn)){{else}}make([]coreTypes.ChunkRecord, 0, len(itemsIn)){{end}},
{{end}}{{if .NeedsEmbed}}{{toProper .EmbedName}}: *{{toLower .EmbedName}},
{{end}}{{if .HasSorts}}Sorts: {{.SortsInstance}}
{{end}}{{if .NeedsChain}}		Chain: chain,
{{end}}	}
	ret.LastUpdate, _ = ret.get{{.Class}}Reload()
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func (s *{{.Class}}Container) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{.Class}}Container) NeedsUpdate(force bool) bool {
	latest, reload := s.get{{.Class}}Reload()
	if force || reload {
		s.LastUpdate = latest
		return true
	}
	return false
}

func (s *{{.Class}}Container) ShallowCopy() Containerer {
	return &{{.Class}}Container{
		{{range .Members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
		{{end}}{{end}}{{if .NeedsEmbed}}{{toProper .EmbedName}}: s.{{toProper .EmbedName}}.ShallowCopy(),
{{end}}{{if .NeedsItems}}NItems: s.NItems,
{{end}}{{if .NeedsChain}}			Chain: s.Chain,
{{end}}			LastUpdate: s.LastUpdate,
			// EXISTING_CODE
			// EXISTING_CODE
	}
}

func (s *{{.Class}}Container) Summarize() {
{{if .NeedsItems}}	s.NItems = uint64(len(s.Items))
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{.Class}}Container) get{{.Class}}Reload() (ret time.Time, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
