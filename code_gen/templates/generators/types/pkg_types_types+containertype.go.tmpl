{{ $class := .Class }}
{{ $embedType := .EmbedType }}
{{ $embedName := .EmbedName }}
{{ $hasSorts := .HasSorts }}
{{ $initChain := .InitChain }}
{{ $inputType := .InputType }}
{{ $isEditable := .IsEditable}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $lower := toLower .Class }}
{{ $members := .Members }}
{{ $needsChain := .NeedsChain }}
{{ $needsSdk := .NeedsSdk}}
{{ $needsLoad := .NeedsLoad}}
{{ $otherName := .OtherName }}
{{ $otherType := .OtherType }}
{{ $sortsInstance := .SortsInstance }}
{{ $routeLabel := .UiRouteLabel}}
{{ $routeLower := .UiRouteLower -}}

{{ $hasItems := and (gt (len .ItemName) 0) true }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}
{{ $hasOther := and (gt (len .OtherName) 0) true }}

{{if $needsLoad}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

//-------------------------------------------------------------------
type {{$class}}Container struct {
{{range $members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}{{if $hasEmbed}}{{$embedType}} `json:",inline"`
{{end}}{{if $hasItems}}	Items []{{$itemType}} `json:"items"`
	NItems uint64 `json:"nItems"`
{{end}}{{if $hasSorts}}	Sorts sdk.SortSpec `json:"sorts"`
{{end}}{{if $needsChain}}	Chain string `json:"chain"`
{{end}}	LastUpdate int64 `json:"lastUpdate"`
	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func New{{$class}}Container(chain string
{{- if $hasItems -}}
, itemsIn []{{$inputType}}
{{- end -}}
{{- if $hasEmbed -}}
, {{toLower $embedName}} *{{$embedType}}
{{- end -}}
{{- if $hasOther -}}
, {{toLower $otherName}} {{$otherType}}
{{- end -}}
) {{$class}}Container {
	ret := {{$class}}Container{
	{{if $hasItems}}Items: {{if eq $itemType $inputType}}itemsIn,
NItems: uint64(len(itemsIn)){{else}}make([]coreTypes.ChunkRecord, 0, len(itemsIn)){{end}},
{{end}}{{if $hasEmbed}}{{toProper $embedName}}: *{{toLower $embedName}},
{{end}}{{if $hasSorts}}Sorts: {{$sortsInstance}}
{{end}}{{if $needsChain}}		Chain: chain,
{{end}}	}
{{if $initChain}}	ret.Chain = chain
{{end}}	ret.LastUpdate, _ = ret.get{{$class}}Reload()
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) GetItems() interface{} {
{{if $hasItems -}}
	return s.Items
{{- else -}}
	return nil
{{- end}}
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) SetItems(items interface{}) {
{{if $hasItems -}}
	s.Items = items.([]{{$itemType}})
{{- else -}}
	// s.Items = items.([]{{$itemType}})
{{- end}}
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) NeedsUpdate(force bool) bool {
	latest, reload := s.get{{$class}}Reload()
	if force || reload {
		DebugInts("{{toLower $class}}", s.LastUpdate, latest)
		s.LastUpdate = latest
		return true
	}
	return false
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) ShallowCopy() Containerer {
	ret := &{{$class}}Container{
		{{range $members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
		{{end}}{{end}}{{if $hasEmbed}}{{toProper $embedName}}: s.{{toProper $embedName}}.ShallowCopy(),
{{end}}{{if $hasItems}}NItems: s.NItems,
{{end}}{{if $needsChain}}			Chain: s.Chain,
{{end}}			LastUpdate: s.LastUpdate,
			// EXISTING_CODE
			// EXISTING_CODE
	}
{{if $initChain}}	ret.Chain = s.Chain
{{end}}	return ret
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) Clear() {
{{if $hasItems}}	s.NItems = 0
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) passesFilter({{if $hasItems}}item *{{$itemType}}, {{else}}{{end}}filter *Filter) (ret bool) {
	ret = true
	if filter.HasCriteria() {
		ret = false
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) Accumulate({{if $hasItems}}item *{{$itemType}}{{end}}) {
{{if $hasItems}}	s.NItems++
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) Finalize() {
	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) CollateAndFilter(theMap *FilterMap) interface{} {
{{- if $hasItems}}
	s.Clear()

	filter, _ := theMap.Load("{{$routeLower}}") // may be empty
	if !filter.HasCriteria() {
		s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
			s.Accumulate(item)
			return true
		}, nil)
		s.Finalize()
		return s.Items
	}
	filtered := []{{$itemType}}{}
	s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
		if s.passesFilter(item, &filter) {
			s.Accumulate(item)
			filtered = append(filtered, *item)
		}
		return true
	}, nil)
	s.Finalize()
{{else}}
	filtered := []Nothing{}
{{end}}
	// EXISTING_CODE
	// EXISTING_CODE

	return filtered
}

//-------------------------------------------------------------------
func (s *{{$class}}Container) get{{$class}}Reload() (ret int64, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

//-------------------------------------------------------------------
{{if $hasItems}}type Every{{$itemName}}Fn func(item *{{$itemType}}, data any) bool

//-------------------------------------------------------------------
func (s *{{$class}}Container) ForEveryItem(process Every{{$itemName}}Fn, data any) bool {
	for i := 0; i < len(s.Items); i++ {
		if !process(&s.Items[i], data) {
			return false
		}
	}
	return true
}
{{end}}

// EXISTING_CODE
// EXISTING_CODE

//-------------------------------------------------------------------
// Template variables:
// class:         {{$class}}
// lower:         {{$lower}}
// routeLabel:    {{$routeLabel}}
// routeLower:    {{$routeLower}}
// embedName:     {{$embedName}}
// embedType:     {{$embedType}}
// otherName:     {{$otherName}}
// otherType:     {{$otherType}}
// itemName:      {{$itemName}}
// itemType:      {{$itemType}}
// inputType:     {{$inputType}}
// hasItems:      {{if $hasItems}}true{{else}}false{{end}}
// hasEmbed:      {{if $hasEmbed}}true{{else}}false{{end}}
// hasOther:      {{if $hasOther}}true{{else}}false{{end}}
// hasSorts:      {{$hasSorts}}
// initChain:     {{$initChain}}
// isEditable:    {{$isEditable}}
// needsChain:    {{$needsChain}}
// needsLoad:     {{$needsLoad}}
// needsSdk:      {{$needsSdk}}
{{end}}
