{{/*==============================================================*/}}
{{ $class := .Class }}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemName := .ItemName}}
{{ $itemType := .ItemType}}
{{ $embedName := .EmbedName }}
{{ $embedType := .EmbedType }}
{{ $members := .Members }}
{{ $hasEmbed := and (gt (len $embedName) 0) true }}

{{ $isHistory := eq $class "History" }}
{{ $isProject := eq $class "Project" }}
{{ $noChildren := (eq .Children "") }}

{{ $embed1 := "//-- remove line --" }}
{{ if $hasEmbed }}
	{{ $embed1 = print "  " $embedType "`json:\",inline\"`" }}
{{ end }}

{{ $embed2 := "//-- remove line --" }}
{{ if $hasEmbed }}
	{{ $embed2 = print "  " $embedType ": " (toPlural (toLower $embedName)) "[0].ShallowCopy()," }}
{{ end }}

{{ $param1 := print "itemsIn []" $itemType }}
{{ if $hasEmbed }}
	{{ $param1 = print (toPlural (toLower $embedName)) " []" $embedType }}
{{ end }}

{{ $param2 := "" }}
{{ if $isHistory }}
	{{ $param2 = ", address base.Address" }}
{{ end }}

{{ $param3 := "" }}
{{ if $isHistory }}
	{{ $param3 = ", address" }}
{{ else if $isProject }}
	{{ $param3 = ", itemsIn" }}
{{ end }}

{{ $param4 := "" }}
{{ if $isProject }}
	{{ $param4 = ", itemsIn []HistoryContainer" }}
{{ end }}

{{/*==============================================================*/}}
{{if $noChildren}}// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

type {{$class}}Container struct {
	{{range $members}}
	{{- $goType := replace .GoType "types." "" -}}
	{{- if .IsEmbed }}
		{{$goType}} `json:",inline"`
	{{- else if .IsSimpField}}
		{{.GoName}} {{$goType}} {{.Tag}}
	{{- end -}}
	{{- end}}
	Sorts sdk.SortSpec `json:"sorts"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{$class}}Container(chain string, {{$param1}}{{$param2}}) {{$class}}Container {
	// EXISTING_CODE
	// EXISTING_CODE
	ret := {{$class}}Container{
		Items: itemsIn,
		NItems: uint64(len(itemsIn)),
		{{$embed2}}
		Sorts: {{.SortsInstance}},
		Updater: New{{$class}}Updater(chain{{$param3}}),
 	}
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func New{{$class}}Updater(chain string{{$param2}}{{$param4}}, resetIn ...bool) sdk.Updater {
	reset := false
	if len(resetIn) > 0 {
		reset = resetIn[0]
	}

	// EXISTING_CODE
	// EXISTING_CODE
	u, _ := sdk.NewUpdater("{{$routeLower}}", items)
	if reset {
		u.Reset()
	}
	return u
}

func (s *{{$class}}Container) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{$class}}Container) GetItems() interface{} {
	return s.Items
}

func (s *{{$class}}Container) SetItems(items interface{}) {
	s.Items = items.([]{{$itemType}})
}

func (s *{{$class}}Container) NeedsUpdate() bool {
	if updater, reload, _ := s.Updater.NeedsUpdate(); reload {
		s.Updater = updater
		return true
	}
	return false
}

func (s *{{$class}}Container) ShallowCopy() Containerer {
	ret := &{{$class}}Container{ {{range $members}}
		{{- if .IsEmbed }}
			{{.GoName}}: s.{{.GoName}}.ShallowCopy(),
		{{- else if and .IsSimpField (not (eq .Name "items") ) }}
			{{.GoName}}: s.{{.GoName}},
		{{- end -}}
		{{- end}}
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return ret
}

func (s *{{$class}}Container) Clear() {
	s.NItems = 0
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$class}}Container) passesFilter(item *{{$itemType}}, filter *Filter) (ret bool) {
	ret = true
	if filter.HasCriteria() {
		ret = false
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return
}

func (s *{{$class}}Container) Accumulate(item *{{$itemType}}) {
	s.NItems++
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$class}}Container) Finalize() {
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$class}}Container) CollateAndFilter(theMap *FilterMap) interface{} {
	s.Clear()

	filter, _ := theMap.Load("{{$routeLower}}") // may be empty
	if !filter.HasCriteria() {
		s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
			s.Accumulate(item)
			return true
		}, nil)
		s.Finalize()
		return s.Items
	}
	filtered := []{{$itemType}}{}
	s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
		if s.passesFilter(item, &filter) {
			s.Accumulate(item)
			filtered = append(filtered, *item)
		}
		return true
	}, nil)
	s.Finalize()

	// EXISTING_CODE
	// EXISTING_CODE

	return filtered
}

func (s *{{$class}}Container) ForEveryItem(process Every{{$itemName}}Fn, data any) bool {
	for i := 0; i < len(s.Items); i++ {
		if !process(&s.Items[i], data) {
			return false
		}
	}
	return true
}

func (s *{{$class}}Container) Sort() (err error) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
{{- end }}
