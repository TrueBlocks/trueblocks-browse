{{/*==============================================================*/}}

{{ $class := .Class }}
{{ $container := print $class "Container" }}
{{ $routeLower := toLower .UiRouteName -}}
{{ $itemName := .ItemName}}
{{ $itemType := .ItemType}}
{{ $embedName := .EmbedName }}
{{ $embedType := .EmbedType }}
{{ $members := .Members }}

{{ $hasItems := and (gt (len $itemName) 0) true }}
{{ $hasEmbed := and (gt (len $embedName) 0) true }}
{{ $hasSorts := .HasSorts }}

{{ $isHistory := eq $class "History" }}
{{ $isProject := eq $class "Project" }}
{{ $isSession := eq $class "Session" }}
{{ $isStatus := eq $class "Status" }}
{{ $isSettings := eq $class "Settings" }}

{{/*==============================================================*/}}

{{ $inputType := $itemType }}

{{ $items1 := "//-- remove line --" }}
{{ if $hasItems }}
	{{ $items1 = print "Items []" $itemType "`json:\"items\"`\n  NItems uint64 `json:\"nItems\"`" }}
{{ end }}

{{ $items2 := "//-- remove line --" }}
{{ if $hasItems }}
	{{ $items2 = print "  Items:   itemsIn,\n  NItems:  uint64(len(itemsIn))," }}
{{ end }}

{{ $items3 := "//-- remove line --" }}
{{ if $hasItems }}
	{{ $items3 = "NItems: s.NItems," }}
{{ end }}

{{ $embed1 := "//-- remove line --" }}
{{ if $hasEmbed }}
	{{ $embed1 = print "  " $embedType "`json:\",inline\"`" }}
{{ end }}

{{ $embed2 := "//-- remove line --" }}
{{ if $hasEmbed }}
	{{ $embed2 = print "  " (toProper $embedName) ": *" (toLower $embedName) "," }}
{{ end }}

{{ $embed3 := "//-- remove line --" }}
{{ if $hasEmbed }}
	{{ $embed3 = print "  " (toProper $embedName) ": s." (toProper $embedName) ".ShallowCopy()," }}
{{ end }}

{{ $sorts1 := "//-- remove line --" }}
{{ if $hasSorts }}
	{{ $sorts1 = print "  Sorts sdk.SortSpec `json:\"sorts\"`" }}
{{ end }}

{{ $sorts2 := "//-- remove line --" }}
{{ if $hasSorts }}
	{{ $sorts2 = print "  Sorts: " .SortsInstance }}
{{ end }}

{{ $param1 := "" }}
{{ if $hasItems }}
	{{ $param1 = print ", itemsIn []" $inputType }}
{{ end }}

{{ $param2 := "" }}
{{ if $hasEmbed }}
	{{ $param2 = print ", " (toLower $embedName) " *" $embedType }}
{{ end }}

{{ $param3 := "" }}
{{ if $isHistory }}
	{{ $param3 = ", address base.Address" }}
{{ end }}

{{ $param4 := "" }}
{{ if $isHistory }}
	{{ $param4 = ", address" }}
{{ else if $isProject }}
	{{ $param4 = ", itemsIn" }}
{{ end }}

{{ $param5 := "" }}
{{ if $isProject }}
	{{ $param5 = ", itemsIn []HistoryContainer" }}
{{ end }}

{{ $itemParam := "" }}
{{ if $hasItems }}
	{{ $itemParam = print "item *" $itemType }}
{{ end }}

{{ $param6 := "" }}
{{ if $hasItems }}
	{{ $param6 = print $itemParam "," }}
{{ end }}

{{ $init2 := "//-- remove line --" }}
{{ if or $hasItems $hasEmbed }}
	{{ if $isHistory }}
		{{ $init2 = print `	Chain:   chain,
							Address: address,` }}
	{{ else }}
		{{ if not (or $isSession $isStatus) }}
			{{ $init2 = print `	Chain:   chain,` }}
		{{ end }}
	{{ end }}
{{ end }}

{{ $comment := "" }}
{{ if not $hasItems }}
	{{ $comment = "//" }}
{{ end }}

{{ $getItems := "" }}
{{ if $hasItems }}
	{{ $getItems = "s.Items" }}
{{ else }}
	{{ $getItems = "nil" }}
{{end}}

{{ $forEveryFnType := print "Every" $itemName "Fn" }}
{{ $needsLoad := .Needs "load"}}

{{/*==============================================================*/}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

type {{$container}} struct {
	{{range $members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
	{{end}}{{end}} {{$items1}}
	{{$embed1}}
	{{$sorts1}}
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{$container}}(chain string{{$param1}}{{$param2}}{{$param3}}) {{$container}} {
	ret := {{$container}}{
		{{$items2}}
		{{$embed2}}
		{{$sorts2}}
		{{$init2}}
		Updater: New{{$class}}Updater(chain{{$param4}}),
 	}
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func New{{$class}}Updater(chain string{{$param3}}{{$param5}}, resetIn ...bool) updater.Updater {
	reset := false
	if len(resetIn) > 0 {
		reset = resetIn[0]
	}

	// EXISTING_CODE
	// EXISTING_CODE
	updater, _ := updater.NewUpdater("{{$routeLower}}", items)
	if reset {
		updater.Reset()
	}
	return updater
}

func (s *{{$container}}) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{$container}}) GetItems() interface{} {
	return {{$getItems}}
}

func (s *{{$container}}) SetItems(items interface{}) {
	{{$comment}} s.Items = items.([]{{$itemType}})
}

func (s *{{$container}}) NeedsUpdate() bool {
	if updater, reload, _ := s.Updater.NeedsUpdate(); reload {
		s.Updater = updater
		return true
	}
	return false
}

func (s *{{$container}}) ShallowCopy() Containerer {
	ret := &{{$container}}{
		{{range $members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
{{end}}{{end -}}
		{{$items3}}
		{{$embed3}}
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return ret
}

func (s *{{$container}}) Clear() {
	{{if $hasItems}}  s.NItems = 0
	{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) passesFilter({{$param6}}filter *Filter) (ret bool) {
	ret = true
	if filter.HasCriteria() {
		ret = false
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return
}

func (s *{{$container}}) Accumulate({{$itemParam}}) {
	{{if $hasItems -}}
		s.NItems++
	{{end -}}
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) Finalize() {
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) CollateAndFilter(theMap *FilterMap) interface{} {
{{- if $hasItems}}
	s.Clear()

	filter, _ := theMap.Load("{{$routeLower}}") // may be empty
	if !filter.HasCriteria() {
		s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
			s.Accumulate(item)
			return true
		}, nil)
		s.Finalize()
		return s.Items
	}
	filtered := []{{$itemType}}{}
	s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
		if s.passesFilter(item, &filter) {
			s.Accumulate(item)
			filtered = append(filtered, *item)
		}
		return true
	}, nil)
	s.Finalize()
{{else}}
	filtered := []Nothing{}
{{end}}
	// EXISTING_CODE
	// EXISTING_CODE

	return filtered
}

{{if $hasItems -}}
{{ if not $isSettings }}type {{$forEveryFnType}} func(item *{{$itemType}}, data any) bool

{{end -}}
func (s *{{$container}}) ForEveryItem(process {{$forEveryFnType}}, data any) bool {
	for i := 0; i < len(s.Items); i++ {
		if !process(&s.Items[i], data) {
			return false
		}
	}
	return true
}
{{end}}

// EXISTING_CODE
// EXISTING_CODE
