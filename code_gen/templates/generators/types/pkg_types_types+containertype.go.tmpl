{{ $class := .Class }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $embedType := .EmbedType }}
{{ $embedName := .EmbedName }}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $members := .Members }}
{{ $container := print $class "Container" }}

{{ $isHistory := eq $class "History" }}
{{ $isManifest := eq $class "Manifest" }}
{{ $isSettings := eq $class "Settings" }}

{{ $inputType := $itemType }}
{{ $itemsInit1 := "\n  Items: itemsIn," }}
{{ $itemsInit2 := "\n  NItems: uint64(len(itemsIn))," }}
{{ if $isManifest }}
	{{ $inputType = "coreTypes.Manifest" }}
	{{ $itemsInit1 = print "\n  Items: make([]" $itemType ", 0, len(itemsIn))," }}
	{{ $itemsInit2 = "" }}
{{ else if $isSettings }}
	{{ $inputType = "types.SettingsProp" }}
{{ end }}

{{ $hasSorts := .HasSorts }}

{{ $hasItems := and (gt (len $itemName) 0) true }}
{{ $hasEmbed := and (gt (len $embedName) 0) true }}

{{ $param1 := "" }}
{{ if $hasItems }}
	{{ $param1 = print ", itemsIn []" $inputType }}
{{ end }}

{{ $param2 := "" }}
{{ if $hasEmbed }}
	{{ $param2 = print ", " (toLower $embedName) " *" $embedType }}
{{ end }}

{{ $param3 := "" }}
{{ if $isHistory }}
	{{ $param3 = ", address base.Address" }}
{{end}}

{{ $embed1 := "" }}
{{ $embed2 := "" }}
{{ $embed3 := "" }}
{{ if $hasEmbed }}
	{{ $embed1 = print "\n  " $embedType "`json:\",inline\"`" }}
	{{ $embed2 = print "\n  " (toProper $embedName) ": *" (toLower $embedName) "," }}
	{{ $embed3 = print "\n  " (toProper $embedName) ": s." (toProper $embedName) ".ShallowCopy()," }}
{{ end }}

{{ $items1 := "" }}
{{ $items2 := "" }}
{{ $items3 := "" }}
{{ if $hasItems }}
	{{ $items1 = print "\n  Items []" $itemType "`json:\"items\"`\nNItems uint64 `json:\"nItems\"`" }}
	{{ $items2 = print $itemsInit1 $itemsInit2 }}
	{{ $items3 = print "\n  NItems: s.NItems," }}
{{ end }}

{{ $sorts1 := "" }}
{{ $sorts2 := "" }}
{{ if $hasSorts }}
	{{ $sorts1 = print "\n  Sorts sdk.SortSpec `json:\"sorts\"`\n" }}
	{{ $sorts2 = print "\n  Sorts: " .SortsInstance }}
{{ end }}

{{ $setItems := print "s.Items = items.([]" $itemType ")" }}
{{ if not $hasItems }}
	{{ $setItems = print "// " $setItems }}
{{end}}

{{ $getItems := print "s.Items" }}
{{ if not $hasItems }}
	{{ $getItems = print "nil" }}
{{end}}

{{/*==============================================================*/}}
{{ $needsLoad := .Needs "load"}}
{{if $needsLoad}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

type {{$container}} struct {
	{{range $members -}}
		{{- if .IsSimpField -}}
			{{.GoName}} {{.GoType}} {{.Tag}}
		{{end -}}
	{{end -}}
	{{$items1}}{{$embed1}}{{$sorts1}}
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{$container}}(chain string{{$param1}}{{$param2}}{{$param3}}) {{$container}} {
	ret := {{$container}}{ {{$items2}}{{$embed2}}{{$sorts2}}
 	}
	ret.Chain = chain
	ret.LastUpdate, _ = ret.get{{$class}}Reload()
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func (s *{{$container}}) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{$container}}) GetItems() interface{} {
	return {{$getItems}}
}

func (s *{{$container}}) SetItems(items interface{}) {
	{{$setItems}}
}

func (s *{{$container}}) NeedsUpdate(force bool) bool {
	latest, reload := s.get{{$class}}Reload()
	if force || reload {
		DebugInts("{{toLower $routeName}}", s.LastUpdate, latest)
		s.LastUpdate = latest
		return true
	}
	return false
}

func (s *{{$container}}) ShallowCopy() Containerer {
	ret := &{{$container}}{
{{range $members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
{{end -}}{{- end -}}{{$embed3 -}}{{$items3}}
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return ret
}

func (s *{{$container}}) Clear() {
	{{if $hasItems}}  s.NItems = 0
	{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) passesFilter({{if $hasItems}}item *{{$itemType}}, {{else}}{{end}}filter *Filter) (ret bool) {
	ret = true
	if filter.HasCriteria() {
		ret = false
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return
}

func (s *{{$container}}) Accumulate({{if $hasItems}}item *{{$itemType}}{{end}}) {
	{{if $hasItems}}	s.NItems++
	{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) Finalize() {
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{$container}}) CollateAndFilter(theMap *FilterMap) interface{} {
{{- if $hasItems}}
	s.Clear()

	filter, _ := theMap.Load("{{$routeLower}}") // may be empty
	if !filter.HasCriteria() {
		s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
			s.Accumulate(item)
			return true
		}, nil)
		s.Finalize()
		return s.Items
	}
	filtered := []{{$itemType}}{}
	s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
		if s.passesFilter(item, &filter) {
			s.Accumulate(item)
			filtered = append(filtered, *item)
		}
		return true
	}, nil)
	s.Finalize()
{{else}}
	filtered := []Nothing{}
{{end}}
	// EXISTING_CODE
	// EXISTING_CODE

	return filtered
}

func (s *{{$container}}) get{{$class}}Reload() (ret int64, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

{{if $hasItems}}type Every{{$itemName}}Fn func(item *{{$itemType}}, data any) bool

func (s *{{$container}}) ForEveryItem(process Every{{$itemName}}Fn, data any) bool {
	for i := 0; i < len(s.Items); i++ {
		if !process(&s.Items[i], data) {
			return false
		}
	}
	return true
}
{{end}}

// EXISTING_CODE
// EXISTING_CODE
{{end}}
