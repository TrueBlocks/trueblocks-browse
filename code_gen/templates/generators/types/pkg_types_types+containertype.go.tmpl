{{ $class := .Class }}
{{ $routeName := .UiRouteName}}
{{ $routeLower := toLower .UiRouteName -}}
{{ $embedType := .EmbedType }}
{{ $embedName := .EmbedName }}
{{ $hasSorts := .HasSorts }}
{{ $inputType := .InputType }}
{{ $isEditable := .IsEditable}}
{{ $itemType := .ItemType}}
{{ $itemName := .ItemName}}
{{ $lower := toLower .Class }}
{{ $members := .Members }}
{{ $needsSdk := .NeedsSdk}}
{{ $needsLoad := .NeedsLoad}}
{{ $otherName := .OtherName }}
{{ $otherType := .OtherType }}
{{ $sortsInstance := .SortsInstance }}
{{ $container := print $class "Container" }}

{{ $hasItems := and (gt (len .ItemName) 0) true }}
{{ $hasEmbed := and (gt (len .EmbedName) 0) true }}
{{ $hasOther := and (gt (len .OtherName) 0) true }}

{{if $needsLoad}}
// This file is auto-generated. Edit only code inside
// of ExistingCode markers (if any).
package types

// EXISTING_CODE
// EXISTING_CODE

//-------------------------------------------------------------------
type {{$container}} struct {
{{range $members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}{{if $hasEmbed}}{{$embedType}} `json:",inline"`
{{end}}{{if $hasItems}}	Items []{{$itemType}} `json:"items"`
	NItems uint64 `json:"nItems"`
{{end}}{{if $hasSorts}}	Sorts sdk.SortSpec `json:"sorts"`
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func New{{$container}}(chain string
{{- if $hasItems -}}
, itemsIn []{{$inputType}}
{{- end -}}
{{- if $hasEmbed -}}
, {{toLower $embedName}} *{{$embedType}}
{{- end -}}
{{- if $hasOther -}}
, {{toLower $otherName}} {{$otherType}}
{{- end -}}
) {{$container}} {
	ret := {{$container}}{
	{{if $hasItems}}Items: {{if eq $itemType $inputType}}itemsIn,
NItems: uint64(len(itemsIn)){{else}}make([]coreTypes.ChunkRecord, 0, len(itemsIn)){{end}},
{{end}}{{if $hasEmbed}}{{toProper $embedName}}: *{{toLower $embedName}},
{{end}}{{if $hasSorts}}Sorts: {{$sortsInstance}}
{{end}}	}
	ret.Chain = chain
	ret.LastUpdate, _ = ret.get{{$class}}Reload()
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

//-------------------------------------------------------------------
func (s *{{$container}}) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

//-------------------------------------------------------------------
func (s *{{$container}}) GetItems() interface{} {
{{if $hasItems -}}
	return s.Items
{{- else -}}
	return nil
{{- end}}
}

//-------------------------------------------------------------------
func (s *{{$container}}) SetItems(items interface{}) {
{{if $hasItems -}}
	s.Items = items.([]{{$itemType}})
{{- else -}}
	// s.Items = items.([]{{$itemType}})
{{- end}}
}

//-------------------------------------------------------------------
func (s *{{$container}}) NeedsUpdate(force bool) bool {
	latest, reload := s.get{{$class}}Reload()
	if force || reload {
		DebugInts("{{toLower $class}}", s.LastUpdate, latest)
		s.LastUpdate = latest
		return true
	}
	return false
}

//-------------------------------------------------------------------
func (s *{{$container}}) ShallowCopy() Containerer {
	ret := &{{$container}}{
		{{range $members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
		{{end}}{{end}}{{if $hasEmbed}}{{toProper $embedName}}: s.{{toProper $embedName}}.ShallowCopy(),
{{end}}{{if $hasItems}}NItems: s.NItems,
{{end}}	// EXISTING_CODE
			// EXISTING_CODE
	}
	return ret
}

//-------------------------------------------------------------------
func (s *{{$container}}) Clear() {
{{if $hasItems}}	s.NItems = 0
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$container}}) passesFilter({{if $hasItems}}item *{{$itemType}}, {{else}}{{end}}filter *Filter) (ret bool) {
	ret = true
	if filter.HasCriteria() {
		ret = false
		// EXISTING_CODE
		// EXISTING_CODE
	}
	return
}

//-------------------------------------------------------------------
func (s *{{$container}}) Accumulate({{if $hasItems}}item *{{$itemType}}{{end}}) {
{{if $hasItems}}	s.NItems++
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$container}}) Finalize() {
	// EXISTING_CODE
	// EXISTING_CODE
}

//-------------------------------------------------------------------
func (s *{{$container}}) CollateAndFilter(theMap *FilterMap) interface{} {
{{- if $hasItems}}
	s.Clear()

	filter, _ := theMap.Load("{{$routeLower}}") // may be empty
	if !filter.HasCriteria() {
		s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
			s.Accumulate(item)
			return true
		}, nil)
		s.Finalize()
		return s.Items
	}
	filtered := []{{$itemType}}{}
	s.ForEveryItem(func(item *{{$itemType}}, data any) bool {
		if s.passesFilter(item, &filter) {
			s.Accumulate(item)
			filtered = append(filtered, *item)
		}
		return true
	}, nil)
	s.Finalize()
{{else}}
	filtered := []Nothing{}
{{end}}
	// EXISTING_CODE
	// EXISTING_CODE

	return filtered
}

//-------------------------------------------------------------------
func (s *{{$container}}) get{{$class}}Reload() (ret int64, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

//-------------------------------------------------------------------
{{if $hasItems}}type Every{{$itemName}}Fn func(item *{{$itemType}}, data any) bool

//-------------------------------------------------------------------
func (s *{{$container}}) ForEveryItem(process Every{{$itemName}}Fn, data any) bool {
	for i := 0; i < len(s.Items); i++ {
		if !process(&s.Items[i], data) {
			return false
		}
	}
	return true
}
{{end}}

// EXISTING_CODE
// EXISTING_CODE
{{end}}
