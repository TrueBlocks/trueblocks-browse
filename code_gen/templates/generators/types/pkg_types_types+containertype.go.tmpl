package types

// EXISTING_CODE
// EXISTING_CODE

type {{.Class}}Container struct {
{{range .Members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}	Items []{{.Class}}ItemType `json:"items"`
	NItems uint64 `json:"nItems"`
	Chain string `json:"chain"`
	LastUpdate time.Time `json:"lastUpdate"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{.Class}}Container(chain string, itemsIn {{.Class}}InputType) {{.Class}}Container {
	latest, _ := get{{.Class}}Reload(chain, time.Time{})
	ret := {{.Class}}Container{
		Items:      make([]{{.Class}}ItemType, 0, len(itemsIn)),
		Chain:      chain,
		LastUpdate: latest,
	}
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func (s *{{.Class}}Container) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{.Class}}Container) NeedsUpdate(force bool) bool {
	latest, reload := get{{.Class}}Reload(s.Chain, s.LastUpdate)
	if force || reload {
		s.LastUpdate = latest
		return true
	}
	return false
}

func (s *{{.Class}}Container) ShallowCopy() Containerer {
	return &{{.Class}}Container{
		{{range .Members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
		{{end}}{{end}}	NItems: s.NItems,
			Chain: s.Chain,
			LastUpdate: s.LastUpdate,
			// EXISTING_CODE
			// EXISTING_CODE
	}
}

func (s *{{.Class}}Container) Summarize() {
	s.NItems = uint64(len(s.Items))
	// EXISTING_CODE
	// EXISTING_CODE
}

func get{{.Class}}Reload(chain string, lastUpdate time.Time) (ret time.Time, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
