package types

// EXISTING_CODE
// EXISTING_CODE

type {{.Class}}Container struct {
{{range .Members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}	{{if .HasItemType}}	{{.ItemType}} `json:",inline"`{{else}}	Items []{{.Class}}ItemType `json:"items"`
	NItems uint64 `json:"nItems"`{{end}}
{{if .NeedsChain}}	Chain string `json:"chain"`
{{end}}	LastUpdate time.Time `json:"lastUpdate"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func New{{.Class}}Container(chain string, {{.InputType}}) {{.Class}}Container {
	ret := {{.Class}}Container{
		{{.InputTypeInit}},
{{if .NeedsChain}}		Chain: chain,
{{end}}	}
	ret.LastUpdate, _ = ret.get{{.Class}}Reload()
	// EXISTING_CODE
	// EXISTING_CODE
	return ret
}

func (s *{{.Class}}Container) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{.Class}}Container) NeedsUpdate(force bool) bool {
	latest, reload := s.get{{.Class}}Reload()
	if force || reload {
		s.LastUpdate = latest
		return true
	}
	return false
}

func (s *{{.Class}}Container) ShallowCopy() Containerer {
	return &{{.Class}}Container{
		{{range .Members}}{{if .IsSimpField}}{{.GoName}}: s.{{.GoName}},
		{{end}}{{end}}{{.InputTypeCopy}},
{{if .NeedsChain}}			Chain: s.Chain,
{{end}}			LastUpdate: s.LastUpdate,
			// EXISTING_CODE
			// EXISTING_CODE
	}
}

func (s *{{.Class}}Container) Summarize() {
{{if not .HasItemType}}	s.NItems = uint64(len(s.Items))
{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{.Class}}Container) get{{.Class}}Reload() (ret time.Time, reload bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
